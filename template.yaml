# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Infrastructure for private-notes project

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs18.x
    Architectures:
      - x86_64
    MemorySize: 128
    Timeout: 100
    Environment:
      Variables:
        # Make table name accessible as environment variable from function code during execution
        COLLECTIONS_TABLE: !Ref CollectionsTable
        NOTES_TABLE: !Ref NotesTable

Parameters:
  EnvironmentParameter:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: dev, prod

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Api gateway resource
  PrivateNotesApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub 'PrivateNotes-Api-${EnvironmentParameter}'
      StageName: !Ref EnvironmentParameter
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: '/*' # allows for logging on any resource
          HttpMethod: '*' # allows for logging on any method
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./api/openapi.yaml
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for default api key
          UsagePlanName: !Sub 'private-notes-${EnvironmentParameter}-api-usage-plan'

      Cors:
        AllowMethods: "'OPTIONS,POST,GET,PUT,DELETE'"
        AllowOrigin: "'*'"
        AllowHeaders: "'X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"

  # Collection enpoint handlers
  # ---------------------------
  ListCollections:
    Type: AWS::Serverless::Function
    Properties:
      Handler: list-collections.listCollections
      FunctionName: !Sub 'private-notes-${EnvironmentParameter}-ListCollections'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CollectionsTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: cjs
        Minify: false
        Sourcemap: true
        EntryPoints:
          - src/handlers/list-collections.ts

  CreateCollection:
    Type: AWS::Serverless::Function
    Properties:
      Handler: create-collection.createCollection
      FunctionName: !Sub 'private-notes-${EnvironmentParameter}-CreateCollection'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CollectionsTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: cjs
        Minify: false
        Sourcemap: true
        EntryPoints:
          - src/handlers/create-collection.ts

  UpdateCollection:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update-collection.updateCollection
      FunctionName: !Sub 'private-notes-${EnvironmentParameter}-UpdateCollection'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CollectionsTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: cjs
        Minify: false
        Sourcemap: true
        EntryPoints:
          - src/handlers/update-collection.ts

  GetCollection:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-collection.getCollection
      FunctionName: !Sub 'private-notes-${EnvironmentParameter}-GetCollection'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CollectionsTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: cjs
        Minify: false
        Sourcemap: true
        EntryPoints:
          - src/handlers/get-collection.ts

  DeleteCollection:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete-collection.deleteCollection
      FunctionName: !Sub 'private-notes-${EnvironmentParameter}-DeleteCollection'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CollectionsTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: cjs
        Minify: false
        Sourcemap: true
        EntryPoints:
          - src/handlers/delete-collection.ts

  # Note enpoint handlers
  # ---------------------------

  ListNotes:
    Type: AWS::Serverless::Function
    Properties:
      Handler: list-notes.listNotes
      FunctionName: !Sub 'private-notes-${EnvironmentParameter}-ListNotes'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotesTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: cjs
        Minify: false
        Sourcemap: true
        EntryPoints:
          - src/handlers/list-notes.ts

  CreateNote:
    Type: AWS::Serverless::Function
    Properties:
      Handler: create-note.createNote
      FunctionName: !Sub 'private-notes-${EnvironmentParameter}-CreateNote'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotesTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: cjs
        Minify: false
        Sourcemap: true
        EntryPoints:
          - src/handlers/create-note.ts

  UpdateNote:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update-note.updateNote
      FunctionName: !Sub 'private-notes-${EnvironmentParameter}-UpdateNote'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotesTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: cjs
        Minify: false
        Sourcemap: true
        EntryPoints:
          - src/handlers/update-note.ts

  DeleteNote:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete-note.deleteNote
      FunctionName: !Sub 'private-notes-${EnvironmentParameter}-DeleteNote'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotesTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: cjs
        Minify: false
        Sourcemap: true
        EntryPoints:
          - src/handlers/delete-note.ts

  # DB Tables
  # ---------------------------

  CollectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'private-notes-${EnvironmentParameter}-table-collections'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: collectionId
          AttributeType: S
        - AttributeName: active
          AttributeType: N
      KeySchema:
        - AttributeName: collectionId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ActiveCollections
          KeySchema:
            - AttributeName: collectionId
              KeyType: HASH
            - AttributeName: active
              KeyType: RANGE
          Projection:
            NonKeyAttributes:
              - name
              - updatedAt
            ProjectionType: INCLUDE

  NotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'private-notes-${EnvironmentParameter}-table-notes'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: collectionId
          AttributeType: S
        - AttributeName: noteId
          AttributeType: S
      KeySchema:
        - AttributeName: collectionId
          KeyType: HASH
        - AttributeName: noteId
          KeyType: RANGE

  # Roles and stuff
  # ---------------------------

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      Path: !Sub '/private-notes/${EnvironmentParameter}/serviceRoles/'
      RoleName: !Sub 'private-notes-${EnvironmentParameter}-api-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: !Sub 'private-notes-${EnvironmentParameter}-api-execution-role-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub ${ListCollections.Arn}
                  - !Sub ${CreateCollection.Arn}
                  - !Sub ${UpdateCollection.Arn}
                  - !Sub ${GetCollection.Arn}
                  - !Sub ${DeleteCollection.Arn}
                  - !Sub ${ListNotes.Arn}
                  - !Sub ${CreateNote.Arn}
                  - !Sub ${UpdateNote.Arn}
                  - !Sub ${DeleteNote.Arn}

  Account:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !Sub ${ApiRole.Arn}

Outputs:
  WebEndpoint:
    Description: 'API Gateway endpoint URL for Prod stage'
    Value: !Sub 'https://${PrivateNotesApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentParameter}/'
